version: '3.8'

services:
    nginx:
        container_name: nginx
        image: nginx:1.21.1-alpine
        labels: 
            service.type: basic
            service.name: nginx
            service.desc: nginx-1.21.1
        ports: 
            - 80:80
        # environment:
        #     - NGINX_PORT=80
        configs: 
            - nginx.conf
            - nginx-default.conf
        volumes: 
            - ${DEPLOY_DIR}/log/nginx:/var/log/nginx
        command: ['nginx', '-g', 'daemon off;']
        restart: always

    mysql:
        container_name: mysql
        image: mysql:8.0
        labels: 
          service.type: basic
          service.name: mysql
          service.desc: mysql-8.0
        ports:
            - 3306:3306
        configs:
            - mysql-main.conf:/etc/mysql/my.cnf
            - mysqld.conf:/etc/mysql/conf.d/docker.cnf
            - mysql.conf:/etc/mysql/conf.d/mysql.cnf
        volumes:
            - ${DEPLOY_DIR}/data/mysql:/var/lib/mysql
        environment:
            MYSQL_ROOT_PASSWORD: '8487c31ea210f03eb0577c4f9f9a01f04d692e0dc6707910c8b0890d10db9841'
            # MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql-secret-pw
            MYSQL_DATABASE: 'test'
            MYSQL_USER: 'test'
            MYSQL_PASSWORD: 'XE8d609r6%HE8*w487e9!'
        command: [
            '--default-storage-engine=InnoDB',
            '--max_connections=4000',
            '--character-set-server=utf8mb4',
            '--collation-server=utf8mb4_unicode_ci',
            '--innodb_flush_log_at_trx_commit=1',
            '--lower_case_table_names=1',
            '--sync_binlog=1',
            '--sql_mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION',
        ]
        restart: always

    redis:
        container_name: redis
        image: redis:6.2.5-alpine
        labels:
          service.type: basic
          service.name: redis
          service.desc: redis-6
        command: ['redis-server', '/usr/local/etc/redis/redis.conf']
        configs:
            - redis.conf:/usr/local/etc/redis/redis.conf
        ports:
            - 6379:6379
        volumes:
            - ${DEPLOY_DIR}/data/redis:/data
        restart: always 
    
    # app:
    #     container_name: my-app
    #     image: ${APP_NAME}:${APP_VERSION}
    #     labels: 
    #       service.type: app
    #       service.name: app
    #       service.desc: golang application
    #     command: ['/app/server', '|', 'tee', '/app/log/app.log']
    #     volumes:
    #         - ${DEPLOY_DIR}/log/app:/app/log
    #     restart: always 
  
networks:
    default:
        # Use a custom driver
        #driver: custom-driver-1
        # labels:
        #     APP: DS
configs: 
    nginx.conf:
        file: ${DEPLOY_DIR}/service/nginx/nginx.conf
    nginx-default.conf:
        file: ${DEPLOY_DIR}/service/nginx/conf.d/default.conf
    mysql-main.conf:
        file: ${DEPLOY_DIR}/service/mysql/my.cnf
    mysqld.conf:
        file: ${DEPLOY_DIR}/service/mysql/conf.d/docker.cnf
    mysql.conf:
        file: ${DEPLOY_DIR}/service/mysql/conf.d/mysql.cnf
    redis.conf:
        file: ${DEPLOY_DIR}/service/redis/redis6.conf
# secrets:
#     mysql-rpw:
#         file: ./secret_data
# volumes: 
#     # vo-name:
#     #     name: my-app-data
#     #     external: true
#     #     driver: foobar
#     #     driver_opts:
#     #         type: 'nfs'
#     #         o: 'addr=10.40.0.199,nolock,soft,rw'
#     #         device: ':/docker/example'
#     #     labels:
#     #         com.example.description: 'Database volume'
#     #         com.example.department: 'IT/Ops'
#     nginx-log:
#         labels: 
#             APP: DS


